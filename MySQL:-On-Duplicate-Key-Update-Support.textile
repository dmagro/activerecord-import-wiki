MySQL supports @on duplicate key update@ which allows you to specify fields whose values should be updated if a primary or unique key constraint is violated. See "http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html":http://dev.mysql.com/doc/refman/5.0/en/insert-on-duplicate.html for more information from MySQL.

activerecord-import also supports this for the MySQL database adapter.

h2. On Duplicate Key Update: Basic Example

```ruby
book = Book.create!(:title => "Book1", :author => "FooManChu")
book.title = "Updated Book Title"
book.author = "Bob Barker"

# Attempt to import the existing book, but since it already exists, only the title will be updated
Book.import [book], :on_duplicate_key_update => [:title]

# => results in a Book with the title "Updated Book Title" and author "FooManChu"
```

h2. On Duplicate Key Update: Custom Mappings Example

```ruby
book = Book.create!(:title => "Book1", :author => "FooManChu")
book.title = "Updated Book Title"

# Attempt to import the existing book, but since it already exists, update only the 
# author column using the title value
Book.import [book], :on_duplicate_key_update => {:author => :title }

# => results in a Book with the title "Book1" and author "Updated Book Title"
```

h3. Notice about uniqueness validation

If you have a unique column (other than ID), don't use ActiveRecord uniqueness validator - it won't let to do the update. Use unique index on the database column instead.